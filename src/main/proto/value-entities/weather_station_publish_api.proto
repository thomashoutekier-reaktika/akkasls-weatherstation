// This is the public API offered by your entity.
syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";

package be.reaktika;

option java_outer_classname = "WeatherStationPublishApi";

message StationRegistrationCommand {
    string station_id = 1 [(akkaserverless.field).entity_key = true];
    string station_name = 2;
    double latitude = 3;
    double longitude = 4;
}

message StationTemperatureCommand {
    string station_id = 1 [(akkaserverless.field).entity_key = true];
    repeated TemperatureMeasurements temp_measurements = 2;
}

message TemperatureMeasurements {
    google.protobuf.Timestamp measurement_time = 1;
    float temperature_celcius = 2;
}

message StationWindspeedCommand {
    string station_id = 1 [(akkaserverless.field).entity_key = true];
    repeated WindspeedMeasurement windspeed_measurements = 2;
}

message WindspeedMeasurement {
    google.protobuf.Timestamp measurement_time = 1;
    float windspeed_m_per_s = 2;
}

message GetStationStateCommand {
    string station_id = 1 [(akkaserverless.field).entity_key = true];
}

message StationState {
    string station_id = 1;
    string station_name = 2;
    double latitude = 3;
    double longitude = 4;
    double average_temp_celcius_overall = 5;
    double average_windspeed_overall = 6;

}

service WeatherStationPublishService {
    option (akkaserverless.service) = {
        type : SERVICE_TYPE_ENTITY
        component : ".domain.WeatherStation"
    };

    rpc RegisterStation(StationRegistrationCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/weather/station/register"
            body: "*"
        };
    }
    rpc PublishTemperatureReport(StationTemperatureCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/weather/station/publish/temperature"
            body: "*"
        };
    }

    rpc PublishWindspeedReport(StationWindspeedCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/weather/station/publish/windspeed"
            body: "*"
        };
    }

    rpc GetState(GetStationStateCommand) returns (StationState) {
        option (google.api.http) = {
            get: "/weather/station/{station_id}"
        };
    }
}
