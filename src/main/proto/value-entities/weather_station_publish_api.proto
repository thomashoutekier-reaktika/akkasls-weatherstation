// This is the public API offered by your entity.
syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "value-entities/weatherstation_domain.proto";
import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";

package be.reaktika;

option java_outer_classname = "WeatherStationPublishApi";

message StationRegistrationRequest {
    string station_id = 1;
    string station_name = 2;
    double latitude = 3;
    double longitude = 4;
}

message StationTemperaturePublishRequest {
    string station_id = 1;
    repeated TemperatureMeasurements temp_measurements = 2;
}

message TemperatureMeasurements {
    google.protobuf.Timestamp measurement_time = 1;
    float temperature_celcius = 2;
}

message StationWindspeedPublishRequest {
    string station_id = 1;
    repeated WindspeedMeasurement windspeed_measurements = 2;
}

message WindspeedMeasurement {
    google.protobuf.Timestamp measurement_time = 1;
    float windspeed_m_per_s = 2;
}

message GetStationStateRequest {
    string station_id = 1;
}

message StationStateResponse {
    double average_temp_celcius_overall = 1;
    double average_windspeed_overall = 2;
    string station_id = 3;
    double latitude = 4;
    double longitude = 5;
    string station_name = 6;

}

service WeatherStationPublishService {
    rpc RegisterStation(StationRegistrationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/weather/station/register"
            body: "*"
        };
    }
    rpc PublishTemperatureReport(StationTemperaturePublishRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/weather/station/publish/temperature"
            body: "*"
        };
    }

    rpc PublishWindspeedReport(StationWindspeedPublishRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/weather/station/publish/windspeed"
            body: "*"
        };
    }

    rpc GetDomainState(GetStationStateRequest) returns (be.reaktika.domain.StationState) {
        option (google.api.http) = {
            get: "/weather/station/{station_id}"
        };
    }

    rpc ConvertDomainStateToResponse(be.reaktika.domain.StationState) returns (StationStateResponse);
}
