syntax = "proto3";

import "domain/weatherstation_domain.proto";
import "domain/weatherstation_aggregations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";



package be.reaktika.weatherstation.ports.geocoding;

message GeoCodingState {
  map<string,string> stationIdToCountry = 1;
}


//Commands
message RegisterStationPerCountryCommand {
  string aggType = 1  [(akkaserverless.field).entity_key = true];
  be.reaktika.weatherstation.domain.StationRegistered station = 2;
}

message RegisterTemperaturesPerCountryCommand {
  string aggType = 1  [(akkaserverless.field).entity_key = true];
  string station_id = 2;
  repeated be.reaktika.weatherstation.domain.TemperatureMeasurements temp_measurements = 3;
}

message RegisterWindspeedsPerCountryCommand {
  string aggType = 1  [(akkaserverless.field).entity_key = true];
  string station_id = 2;
  repeated be.reaktika.weatherstation.domain.WindspeedMeasurement windspeed_measurements = 3;
}


//events
message CountryMeasurements {
  string country = 1;
  repeated be.reaktika.weatherstation.domain.TemperatureMeasurement temperatures = 3;
  repeated be.reaktika.weatherstation.domain.WindspeedMeasurement windspeeds = 4;
}



service GeoCodingEntityService {
  rpc StationRegistered(RegisterStationPerCountryCommand) returns (google.protobuf.Empty) {



  }

  rpc ProcessTemperatureAdded(RegisterTemperaturesPerCountryCommand) returns (google.protobuf.Empty) {

  }

  rpc ProcessWindspeedAdded(RegisterWindspeedsPerCountryCommand) returns (google.protobuf.Empty) {

  }

}