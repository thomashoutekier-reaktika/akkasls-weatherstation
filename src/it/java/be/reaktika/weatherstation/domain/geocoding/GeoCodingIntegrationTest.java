/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package be.reaktika.weatherstation.domain.geocoding;

import be.reaktika.weatherstation.Main;
import be.reaktika.weatherstation.domain.aggregations.WeatherStationAggregation;
import com.akkaserverless.javasdk.testkit.junit.AkkaServerlessTestkitResource;
import com.google.protobuf.Empty;
import org.junit.ClassRule;
import org.junit.Test;

import static java.util.concurrent.TimeUnit.*;

// Example of an integration test calling our service via the Akka Serverless proxy
// Run all test classes ending with "IntegrationTest" using `mvn verify -Pit`
public class GeoCodingIntegrationTest {

  /**
   * The test kit starts both the service container and the Akka Serverless proxy.
   */
  @ClassRule
  public static final AkkaServerlessTestkitResource testkit =
    new AkkaServerlessTestkitResource(Main.createAkkaServerless());

  /**
   * Use the generated gRPC client to call the service through the Akka Serverless proxy.
   */
  private final GeoCodingEntityServiceClient client;

  public GeoCodingIntegrationTest() {
    client = GeoCodingEntityServiceClient.create(testkit.getGrpcClientSettings(), testkit.getActorSystem());
  }

  @Test
  public void registerDataOnNonExistingEntity() throws Exception {
    // TODO: set fields in command, and provide assertions to match replies
    // client.registerData(WeatherStationAggregation.AddToAggregationCommand.newBuilder().build())
    //         .toCompletableFuture().get(2, SECONDS);
  }
}
